file:///C:/tools/cmake-3.8.2-win64-x64/doc/cmake/html/manual/cmake-toolchains.7.html?highlight=driver


Cross Compiling for Windows CE¶
Cross compiling for Windows CE requires the corresponding SDK being installed on your system. These SDKs are usually installed under C:/Program Files (x86)/Windows CE Tools/SDKs.

A toolchain file to configure a Visual Studio generator for Windows CE may look like this:

set(CMAKE_SYSTEM_NAME WindowsCE)

set(CMAKE_SYSTEM_VERSION 8.0)
set(CMAKE_SYSTEM_PROCESSOR arm)

set(CMAKE_GENERATOR_TOOLSET CE800) # Can be omitted for 8.0
set(CMAKE_GENERATOR_PLATFORM SDK_AM335X_SK_WEC2013_V310)
The CMAKE_GENERATOR_PLATFORM tells the generator which SDK to use. Further CMAKE_SYSTEM_VERSION tells the generator what version of Windows CE to use. Currently version 8.0 (Windows Embedded Compact 2013) is supported out of the box. Other versions may require one to set CMAKE_GENERATOR_TOOLSET to the correct value.

Cross Compiling for Windows 10 Universal Applications
A toolchain file to configure a Visual Studio generator for a Windows 10 Universal Application may look like this:

set(CMAKE_SYSTEM_NAME WindowsStore)
set(CMAKE_SYSTEM_VERSION 10.0)
A Windows 10 Universal Application targets both Windows Store and Windows Phone. Specify the CMAKE_SYSTEM_VERSION variable to be 10.0 to build with the latest available Windows 10 SDK. Specify a more specific version (e.g. 10.0.10240.0 for RTM) to build with the corresponding SDK.

-------------------------

add support for clang port

--------------------------

check out if building for mobile/store is possible with MinGW

-----------------------------

replace CMAKE_CURRENT_SOURCE_DIR with

---------------------------------
file:///C:/tools/cmake-3.8.2-win64-x64/doc/cmake/html/variable/MSVC_VERSION.html#variable:MSVC_VERSION
MSVC_VERSION
The version of Microsoft Visual C/C++ being used if any.

Known version numbers are:

1200 = VS  6.0
1300 = VS  7.0
1310 = VS  7.1
1400 = VS  8.0
1500 = VS  9.0
1600 = VS 10.0
1700 = VS 11.0
1800 = VS 12.0
1900 = VS 14.0
1910 = VS 15.0

-------------------------------------

http://www.osronline.com/showthread.cfm?link=264337

message(FATAL_ERROR "MSVC_VERSION: ${MSVC_VERSION}")

CMake build for Windows Drivers
> Can someone point me to any resource which will help me create CMake =
based build system for=20
>our Windows driver project?

Just forget this evil idea, and fire _the whole official WDK_ from =
CMake.

For older non-VS WDKs, you will need DDKBUILD.BAT for this.

For modern WDKs, you can generate the MSBuild project file for WDK by =
CMake, using configure_file() from the latter or such, and then run the =
WDK.

Actually, if you're not about Linux portability, then MSBuild is better =
than CMake - much more powerful imperative part, you have full C# and =
not the pathetic (though working in its mains) imperative language of =
CMake.

What would be a perfect solution is a Python OO library which implements =
the CMake's target object, and calls like "add_custom_target()" and =
"add_executable()" in Python, so that the build scripts will be CMake by =
architecture but Python by language.

--=20
Maxim S. Shatskih
Microsoft MVP on File System And Storage
xxxxx@storagecraft.com
http://www.storagecraft.com

Downloads\Compressed\openPOWERLINK_V2-2.6.2.tar.gz

------------------------------------

WRITTEN BY MORNING
02/03/2016
USING CMAKE PART III – BUILD WITH INTEL C++ COMPILER

https://ywjheart.wordpress.com/2016/03/02/using-cmake-part-iii-build-with-intel-c-compiler/
------------------------------------


